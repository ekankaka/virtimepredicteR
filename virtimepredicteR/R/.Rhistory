method = "spearman", exact = F)$estimate)
x = filtered$trimmed_alignment_width
y = filtered$years_untreated
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_VT <- data.frame(rbind(correlates_VT, cbind("Alignment_width", region, p)))
print("")
})
print("****collinearity between nadir CD4 count and VL before ART****")
filtered = train[train$gene_region == region &
!is.na(train$logVL_before_ART) & !is.na(train$nadir_cd4),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$logVL_before_ART, filtered$nadir_cd4,
method = "spearman", exact = F)$estimate)
print(cor.test(filtered$logVL_before_ART, filtered$nadir_cd4,
method = "spearman", exact = F)$p.value)
print("")
})
}
correlates_VT$p <- round(as.numeric(correlates_VT$p),3)
correlates_VT_wide <- pivot_wider(correlates_VT, names_from = region, values_from = p)
write_xlsx(correlates_VT_wide, "VIREMICTIME_CORRELATES.xlsx")
# correlates of APD ####
correlates_APD = data.frame()
for (i in 1:length(regions)){
region = regions[i]
print("###############")
print(region)
# sex
print("****sex****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$sex),]
N = nrow(filtered)
try({
print(paste(N, "obervations"))
print(table(filtered$sex))
print(tapply(filtered$APD, filtered$sex, median))
x = filtered$sex
y = filtered$APD
p <- safe_function(x,y)
correlates_APD <- data.frame(rbind(correlates_APD, cbind("sex", region, p)))
print("")
})
# subtype (recombinants collapsed)
print("****subtype****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$subtype2),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(table(filtered$subtype2))
print(tapply(filtered$APD, filtered$subtype2, median))
x = filtered$subtype2
y = filtered$APD
p <- safe_function(x,y)
correlates_APD <- data.frame(rbind(correlates_APD, cbind("subtype", region, p)))
print("")
})
print("****pre-ART viral load****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$logVL_before_ART),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$logVL_before_ART,
method = "spearman", exact = F)$estimate)
x = filtered$logVL_before_ART
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("Pre_ART_VL", region, p)))
print("")
})
print("****nadir CD4 count****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$nadir_cd4),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$nadir_cd4,
method = "spearman", exact = F)$estimate)
print(cor.test(filtered$APD, filtered$nadir_cd4,
method = "spearman", exact = F)$p.value)
x = filtered$nadir_cd4
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("Nadir_CD4", region, p)))
print("")
})
print("****Unique sequences****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$unique_sequences),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$unique_sequences,
method = "spearman", exact = F)$estimate)
x = filtered$unique_sequences
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("Unique_Sequences", region, p)))
print("")
})
print("****ART duration****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$weeks_on_ART),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$weeks_on_ART,
method = "spearman", exact = F)$estimate)
x = filtered$weeks_on_ART
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("ART_duration", region, p)))
print("")
})
print("****on-ART samples****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$on_ART_samples),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$on_ART_samples,
method = "spearman", exact = F)$estimate)
x = filtered$on_ART_samples
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("on_ART_samples", region, p)))
print("")
})
print("****alignment width****")
filtered = train[train$gene_region == region &
!is.na(train$APD) & !is.na(train$trimmed_alignment_width),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$APD, filtered$trimmed_alignment_width,
method = "spearman", exact = F)$estimate)
x = filtered$trimmed_alignment_width
y = filtered$APD
p <- cor.test(x,y, method = "spearman", exact = F)$p.value
correlates_APD <- data.frame(rbind(correlates_APD, cbind("Alignment_width", region, p)))
print("")
})
print("****collinearity between nadir CD4 count and VL before ART****")
filtered = train[train$gene_region == region &
!is.na(train$logVL_before_ART) & !is.na(train$nadir_cd4),]
N = nrow(filtered)
try({
print(paste(N, "observations"))
print(cor.test(filtered$logVL_before_ART, filtered$nadir_cd4,
method = "spearman", exact = F)$estimate)
print(cor.test(filtered$logVL_before_ART, filtered$nadir_cd4,
method = "spearman", exact = F)$p.value)
print("")
})
}
correlates_APD$p <- round(as.numeric(correlates_APD$p),3)
correlates_APD_wide <- pivot_wider(correlates_APD, names_from = region, values_from = p)
write_xlsx(correlates_APD_wide, "APD_CORRELATES.xlsx")
# Viral load and APD
png("PLOTS/APD_VS_VIRALLOAD.png", width = 10, height = 7, units = "in", res = 300)
ggplot(dat, aes(x=logVL_before_ART, y = APD)) +
geom_point(size=2, pch = 21) +
facet_wrap(~gene_region) +
#geom_smooth(se=F) +
theme_bw()
dev.off()
# Bayesian models of TSI and APD ####
# PAIRS plot for key variables only
ggplot(dat, aes(x=APD, y=years_untreated, fill = gene_region1)) +
geom_point(pch = 21, size=3, alpha = 0.6) +
#scale_fill_manual(values=pal) +
theme_bw() +
facet_wrap(~gene_region2, scales = "free_x")
ggplot(dat, aes(x=APD_codons, y=years_untreated, fill = gene_region1)) +
geom_point(pch = 21, size=3, alpha = 0.6) +
#scale_fill_manual(values=pal) +
theme_bw() +
facet_wrap(~gene_region2, scales = "free_x")
# meaningful prior for slopes
png("PLOTS/PRIOR_FOR_SLOPE.png", width=10, height = 7, units = "in", res = 300)
par(mfrow=c(2,2))
plot(dat$APD, dat$years_untreated, ylim=c(0,max(dat$years_untreated, na.rm = T)),
xlab = "APD", ylab = "Weeks Untreated", main = "All data",
las=1, col = "gray", xlim = c(0,0.1))
lm1 = lm(dat$years_untreated ~ dat$APD + 0)
#abline(lm1)
mu = lm1$coefficients[1]
abline(v=0.04, lty=2)
abline(a = 0, b = 0, col = 1)
abline(a = 0, b = 50, col = 2)
abline(a = 0, b = 100, col = 3)
abline(a = 0, b = 200, col = 4)
abline(a = 0, b = 400, col = 5)
abline(a = 0, b = 800, col = 6)
abline(a = 0, b = 1600, col = 7)
abline(a = 0, b = 3200, col = 8)
legend("topright", legend = c(0,50,100,200,400,800,1600,3200),
lty = 1, col = 1:8)
hist(rlnorm(n = 1e4, meanlog = log(200), sdlog = 0.5), las = 1,
main = "Lognormal Prior for slope (All data),\n mean = 200 sdlog = 0.5")
dat.s = subset(dat, APD<=0.04)
plot(dat.s$APD, dat.s$years_untreated, ylim=c(0,max(dat.s$years_untreated, na.rm = T)),
xlab = "APD", ylab = "Weeks Untreated", main = "APD <= 0.04", las=1, col = "gray")
lm1 = lm(dat.s$years_untreated ~ dat.s$APD + 0)
#abline(lm1)
mu = lm1$coefficients[1]
abline(v=0.04, lty=2)
abline(a = 0, b = 0, col = 1)
abline(a = 0, b = 50, col = 2)
abline(a = 0, b = 100, col = 3)
abline(a = 0, b = 200, col = 4)
abline(a = 0, b = 400, col = 5)
abline(a = 0, b = 800, col = 6)
abline(a = 0, b = 1600, col = 7)
abline(a = 0, b = 3200, col = 8)
legend("topright", legend = c(0,50,100,200,400,800,1600,3200),
lty = 1, col = 1:8)
hist(rlnorm(n = 1e4, meanlog = log(400), sdlog = 0.5), las = 1,
main = "Lognormal Prior for slope (APD <= 0.04),\n mean = 400 sdlog=0.5")
par(mfrow=c(1,1))
dev.off()
# naive model ####
train$y = train$years_untreated
# mark APD outliers for each gene, using the robust z-score.
train <- train %>%
group_by(gene_region) %>%
mutate(
med_APD = median(APD),
mad_APD = mad(APD),
z_robust = (APD - med_APD) / mad_APD,
#APD_outlier = z_robust > 3,
APD_outlier = abs(z_robust) > 3
)
write_xlsx(train, "training_data.xlsx")
#train$gene = as.numeric(factor(train$gene_region))
m1 <- glm(y ~ APD, data = train  )
summary(m1)
# global model parameters ####
#nsim = 5e5
nsim = 2e6
burnin = 1e4
#thin = 100
thin = 400
# Fit the models ####
out = data.frame()
APD_versions = c("APD","APD_codons")
for (i in (1:length(unique(dat$gene_region)))){
g = unique(dat$gene_region)[i]
for (j in 1:2){
APD_version = APD_versions[j]
print(paste0("****",g," ",APD_version,"****"))
train$y = train$years_untreated
# fit model 1 (LINEAR REGRESSION)
if (APD_version == "APD"){
train$x = train$APD
} else if (APD_version == "APD_codons"){
train$x = train$APD_codons
}
train.s = subset(train, gene_region == g & !is.na(x) & !is.na(y) & !APD_outlier)
m1 <- glm(y ~ x, data = train.s  )
X = model.matrix(m1)[,-1]
data1_jags = as.list(as.data.frame(X))
data1_jags$y = train.s$y
names(data1_jags) = c("x","y")
params1 = c("a","b","sig", "yhat")
mod1 = jags.model(textConnection(mod1_string), data=data1_jags, n.chains=3)
update(mod1, burnin)
mod1_sim = coda.samples(model=mod1,
variable.names=params1,
n.iter=nsim, thin = thin)
mod1_csim = as.mcmc(do.call(rbind, mod1_sim))
dic1 = dic.samples(mod1, n.iter = 1e3)
# Penalized Deviance
PD1 = sum(dic1$deviance + dic1$penalty)
print(raftery.diag(mod1_csim[,c("a",grep("b",colnames(mod1_csim), value = T), "sig")]))
# yhat and residuals
y = data1_jags$y
yhat = colMeans(as.matrix(mod1_csim)[, grep("yhat", colnames(as.matrix(mod1_csim)))])
resid = data1_jags$y - yhat
# MAE
mae1 = mean(abs(y - yhat))
# RSQ
n = length(y)
k = 2 # number of parameters
mean_y = mean(y)
SSR = sum((y - yhat)^2)
SST = sum((y - mean_y)^2)
RSQ1 = 1 - SSR/SST
RSQ1_ADJ = 1 - (1 - RSQ1) * ((n - 1) / (n - k - 1))
saveRDS(mod1_sim, file = paste0("MCMC/",g, "_", APD_version,"_LINEARREGRESSION.rds"))
out1 = data.frame(gene_region = g, APD_version = APD_version,
model = "LINEAR REGRESSION",
observations = n,  PD = PD1, MAE = mae1,
RSQ = RSQ1, RSQ_ADJ = RSQ1_ADJ)
# fit model 2 (PIECEWISE LINEAR REGRESSION)
m2 <- glm(y ~ x, data = train.s )
X = model.matrix(m2)[,-1]
data2_jags = as.list(as.data.frame(X))
data2_jags$y = train.s$y
names(data2_jags) = c("x","y")
params2 = c("a","b","b2","sig","knot", "yhat")
mod2 = jags.model(textConnection(mod2_string), data=data2_jags, n.chains=3)
update(mod2, burnin)
mod2_sim = coda.samples(model=mod2,
variable.names=params2,
n.iter=nsim, thin = thin)
mod2_csim = as.mcmc(do.call(rbind, mod2_sim))
dic2 = dic.samples(mod2, n.iter = 1e3)
# Penalized Deviance
PD2 = sum(dic2$deviance + dic2$penalty)
print(raftery.diag(mod2_csim[,c("a",grep("b",colnames(mod2_csim), value = T),
grep("knot",colnames(mod2_csim), value = T),"sig")]))
# yhat and residuals
y = data2_jags$y
yhat = colMeans(as.matrix(mod2_csim)[, grep("yhat", colnames(as.matrix(mod2_csim)))])
resid = data2_jags$y - yhat
# MAE
mae2 = mean(abs(y - yhat))
# RSQ
n = length(y)
k = 3 # number of parameters
mean_y = mean(y)
SSR = sum((y - yhat)^2)
SST = sum((y - mean_y)^2)
RSQ2 = 1 - SSR/SST
RSQ2_ADJ = 1 - (1 - RSQ2) * ((n - 1) / (n - k - 1))
saveRDS(mod2_sim, file = paste0("MCMC/",g, "_", APD_version,
"_PIECEWISELINEARREGRESSION.rds"))
# save the diagnostics
out2 = data.frame(gene_region = g, APD_version = APD_version,
model = "PIECEWISE LINEAR REGRESSION",
observations = n, PD = PD2, MAE = mae2,
RSQ = RSQ2, RSQ_ADJ = RSQ2_ADJ)
write_xlsx(data.frame(rbind(out1,out2)),
paste0("DIAGNOSTICS/", g, "_", APD_version,"_DIAGNOSTICS.xlsx"))
out = rbind(out, out1,out2)
}
}
write_xlsx(out, paste0("DIAGNOSTICS/ALLGENES_DIAGNOSTICS.xlsx"))
# VISUALIZE RESULTS ####
# APD and APD codons
cor(train$APD, train$APD_codons, method = "pearson")
rsp <- cor(train$APD, train$APD_codons, method = "spearman")
png("PLOTS/APD_VS_APDCODONS.png", width = 7, height = 7, units = "in", res = 300)
plot(train$APD[!train$APD_outlier], train$APD_codons[!train$APD_outlier],
xlim = c(0,0.15), ylim = c(0,0.15),
las = 1, xlab = "APD", ylab="APD Codon Position 3",
main = paste0("APD using all nucleotides vs APD on 3rd codon positions\n Spearman r = ", round(rsp,3)))
abline(a=0,b=1, lty = 2)
dev.off()
diagnostics = read_xlsx("DIAGNOSTICS/ALLGENES_DIAGNOSTICS.xlsx")
diagnostics$gene_region1 = factor(diagnostics$gene_region, levels = regions)
idx = match(diagnostics$gene_region, dat$gene_region)
diagnostics$gene_region2 = dat$gene_region2[idx]
png("PLOTS/SCATTER_VIREMICTIME_APD.png", width = 10, height = 7, units = "in", res = 300)
ggplot(mapping = aes(x=APD,y=years_untreated)) +
geom_point(data = subset(train, !APD_outlier), pch = 21) +
geom_smooth(data = subset(train, !APD_outlier), method = "lm", se=F) +
geom_point(data = subset(train, APD_outlier), color = "red") +
facet_wrap(~gene_region1, scales = "free") +
theme_bw()
dev.off()
png("PLOTS/SCATTER_VIREMICTIME_APDCODONS.png", width = 10, height = 7,
units = "in", res = 300)
ggplot(mapping = aes(x=APD_codons,y=years_untreated)) +
geom_point(data = subset(train, !APD_outlier), pch = 21) +
geom_smooth(data = subset(train, !APD_outlier), method = "lm", se=F) +
geom_point(data = subset(train, APD_outlier), color = "red") +
facet_wrap(~gene_region1, scales = "free") +
theme_bw()
dev.off()
# APD and APD codons
png("PLOTS/PERFORMANCE_APDMETHOD.png", width = 10, height = 7, units = "in", res = 300)
ggplot(diagnostics, aes(x=APD_version, y = RSQ_ADJ, group = gene_region, fill = gene_region2)) +
geom_hline(aes(yintercept = 0), color = "red", lty = 2) +
#geom_hline(aes(yintercept = 0.10), color = "red", lty = 2) +
#geom_text(data = subset(diagnostics, APD_version == "APD"),
#          aes( y = 0.1, label = 0.1), hjust = -2.5, vjust = -0.2, color = "red") +
geom_point(pch = 21, alpha = 0.6, size = 4) +
geom_line(colour = "gray") +
geom_text(data = subset(diagnostics, APD_version == "APD"),
aes(label = gene_region ), size = 2.2, hjust = 1.2, colour = "gray") +
geom_text(data = subset(diagnostics, APD_version == "APD_codons"),
aes(label = gene_region ), size = 2.2, hjust = -0.2, colour = "gray") +
labs(y = "ADJUSTED R-SQUARED", x = "AVERAGE PAIRWISE DIVERSITY TYPE",
fill = "GENE REGION") +
#facet_wrap(~model, scales = "free_y") +
facet_wrap(~model) +
scale_fill_manual(values = pal) +
theme_bw()
dev.off()
png("PLOTS/PERFORMANCE_MODEL.png", width = 10, height = 7, units = "in", res = 300)
ggplot(diagnostics, aes(x=model, y = RSQ_ADJ, group = gene_region, fill = gene_region2)) +
geom_hline(aes(yintercept = 0), color = "red", lty = 2) +
#geom_hline(aes(yintercept = 0.10), color = "red", lty = 2) +
#geom_text(data = subset(diagnostics, APD_version == "APD"),
#          aes( y = 0.1, label = 0.1), hjust = -2.5, vjust = -0.2, color = "red") +
geom_point(pch = 21, alpha = 0.6, size = 4) +
geom_line(colour = "gray") +
geom_text(data = subset(diagnostics, model == "LINEAR REGRESSION"),
aes(label = gene_region ), size = 2.2, hjust = 1.2, colour = "gray") +
geom_text(data = subset(diagnostics, model == "PIECEWISE LINEAR REGRESSION"),
aes(label = gene_region ), size = 2.2, hjust = -0.2, colour = "gray") +
labs(y = "ADJUSTED R-SQUARED", x = "AVERAGE PAIRWISE DIVERSITY TYPE",
fill = "GENE REGION") +
#facet_wrap(~model, scales = "free_y") +
facet_wrap(~APD_version) +
scale_fill_manual(values = pal) +
theme_bw()
dev.off()
# BEST MODEL FOR EACH GENE REGION, WHERE RSQ_ADJ > 10% ####
best_models = diagnostics %>%
dplyr::select(!c(gene_region1, gene_region2)) %>%
filter(RSQ_ADJ > 0.1) %>%
group_by(gene_region) %>%
arrange(desc(RSQ_ADJ), .by_group = T) %>%
filter(row_number() == 1) %>%
ungroup() %>%
arrange(desc(RSQ_ADJ))
# COEFFICIENTS, TRACEPLOTS, AND MODEL ASSUMPTIONS FOR GOOD MODELS ####
for (i in 1:nrow(best_models)){
model_name = paste0("MCMC/",
best_models$gene_region[i], "_",
best_models$APD_version[i], "_",
gsub(" ","", best_models$model[i]),
".rds")
baseName = str_remove(str_extract(model_name, "[^.]*"), "^.*\\/")
print("#############################")
print(model_name)
mod_sim = readRDS(model_name)
# coefficients
mod_csim = as.mcmc(do.call(rbind, mod_sim))
medians <- apply(mod_csim,2,median)
HPDI <- HPDinterval(mod_csim, prob = 0.95)
if (grepl("PIECEWISE", baseName)){
print(cbind(medians,HPDI)[1:4,])
} else {
print(cbind(medians,HPDI)[1:3,])
}
# Traceplots
pdf(paste0("PLOTS/",baseName,"_TRACEPLOT.pdf"))
par(mar=c(5.1,4.1,4.1,2.1)-1)
if (grepl("PIECEWISE", baseName)){
#par(mfrow=c(4,2))
plot(mod_sim[,c("a",grep("b",colnames(mod_csim), value = T),
grep("knot",colnames(mod_csim), value = T),
grep("sig",colnames(mod_csim), value = T))])
} else {
#par(mfrow=c(3,2))
plot(mod_sim[,c("a",grep("b",colnames(mod_csim), value = T),
grep("sig",colnames(mod_csim), value = T))])
}
par(mar=c(5.1,4.1,4.1,2.1))
par(mfrow=c(1,1))
dev.off()
# Model assumptions
png(paste0("PLOTS/",baseName,"_MODELASSUMPTIONS.png"), width = 10, height = 5,
units = "in", res = 300)
train.s = subset(train,
gene_region == best_models$gene_region[i] &
!is.na(x) &
!is.na(y) &
!APD_outlier)
m1 <- glm(y ~ x, data = train.s  )
X = model.matrix(m1)[,-1]
data_jags = as.list(as.data.frame(X))
data_jags$y = train.s$y
names(data_jags) = c("x","y")
yhat = colMeans(as.matrix(mod_csim)[, grep("yhat", colnames(as.matrix(mod_csim)))])
resid = data_jags$y - yhat
par(mar=c(5.1,4.1,4.1,2.1))
par(mfrow=c(1,3))
plot(resid, main = "Independence", las=1)
abline(h=0, lty=2)
plot(yhat, resid, main = "Constant variance", las=1)
abline(h=0, lty=2)
qqnorm(resid, las=1)
par(mfrow=c(1,1))
dev.off()
}
View(best_models)
# Best model, by PD ####
best_models = diagnostics %>%
dplyr::select(!c(gene_region1, gene_region2)) %>%
#filter(RSQ_ADJ > 0.1) %>%
group_by(gene_region) %>%
arrange(PD, .by_group = T) %>%
filter(row_number() == 1) %>%
ungroup() %>%
arrange(PD)
# BEST MODEL FOR EACH GENE REGION, WHERE RSQ_ADJ > 10% ####
best_models = diagnostics %>%
dplyr::select(!c(gene_region1, gene_region2)) %>%
filter(RSQ_ADJ > 0.1) %>%
group_by(gene_region) %>%
arrange(desc(RSQ_ADJ), .by_group = T) %>%
filter(row_number() == 1) %>%
ungroup() %>%
arrange(desc(RSQ_ADJ))
setwd("C:/Users/gosma/OneDrive - Rakai Health Sciences Program/health/research/hiv/diversity_and_tsi/cut_genes/tsipredicteR/R")
usethis::use_readme_md()
usethis::use_gpl3_license()
library(Biostrings)
library(strex)
str_elem()
?str_elem
?strsplit
?regexpr
getwd()
